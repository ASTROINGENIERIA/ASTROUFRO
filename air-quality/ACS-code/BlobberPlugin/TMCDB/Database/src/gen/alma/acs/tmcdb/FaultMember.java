package alma.acs.tmcdb;
// Generated Dec 3, 2018 9:54:59 PM by Hibernate Tools 4.3.1.Final


import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * FaultMember generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name="`FAULTMEMBER`"
    , uniqueConstraints =  @UniqueConstraint(columnNames={"`MEMBERNAME`", "`FAULTFAMILYID`"})
)
public class FaultMember extends alma.acs.tmcdb.translator.TmcdbObject implements java.io.Serializable {


     protected Integer faultMemberId;
     protected Location location;
     protected FaultFamily faultFamily;
     protected String memberName;

    public FaultMember() {
    }
   
    @Id @GeneratedValue(generator="generator")
    @GenericGenerator(name="generator", strategy="native",
       parameters = {@Parameter(name="sequence", value="FaultMember_seq")}
	)

    
    @Column(name="`FAULTMEMBERID`", unique=true, nullable=false)
    public Integer getFaultMemberId() {
        return this.faultMemberId;
    }
    
    public void setFaultMemberId(Integer faultMemberId) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("faultMemberId", this.faultMemberId, this.faultMemberId = faultMemberId);
        else
            this.faultMemberId = faultMemberId;
    }


@ManyToOne(cascade=CascadeType.PERSIST, fetch=FetchType.LAZY)@Cascade( {org.hibernate.annotations.CascadeType.SAVE_UPDATE, org.hibernate.annotations.CascadeType.LOCK} )
    @JoinColumn(name="`LOCATIONID`")
    public Location getLocation() {
        return this.location;
    }
    
    public void setLocation(Location location) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("location", this.location, this.location = location);
        else
            this.location = location;
    }


@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="`FAULTFAMILYID`", nullable=false)
    public FaultFamily getFaultFamily() {
        return this.faultFamily;
    }
    
    public void setFaultFamily(FaultFamily faultFamily) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("faultFamily", this.faultFamily, this.faultFamily = faultFamily);
        else
            this.faultFamily = faultFamily;
    }


    
    @Column(name="`MEMBERNAME`", nullable=false, length=256)
    public String getMemberName() {
        return this.memberName;
    }
    
    public void setMemberName(String memberName) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("memberName", this.memberName, this.memberName = memberName);
        else
            this.memberName = memberName;
    }



   public boolean equalsContent(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof FaultMember) ) return false;
		 FaultMember castOther = ( FaultMember ) other;

		 return ( (this.getFaultFamily()==castOther.getFaultFamily()) || ( this.getFaultFamily()!=null && castOther.getFaultFamily()!=null && this.getFaultFamily().equals(castOther.getFaultFamily()) ) )
 && ( (this.getMemberName()==castOther.getMemberName()) || ( this.getMemberName()!=null && castOther.getMemberName()!=null && this.getMemberName().equals(castOther.getMemberName()) ) );
   }

   public int hashCodeContent() {
         int result = 17;

         
         
         result = 37 * result + ( getFaultFamily() == null ? 0 : this.getFaultFamily().hashCode() );
         result = 37 * result + ( getMemberName() == null ? 0 : this.getMemberName().hashCode() );
         return result;
   }


}


