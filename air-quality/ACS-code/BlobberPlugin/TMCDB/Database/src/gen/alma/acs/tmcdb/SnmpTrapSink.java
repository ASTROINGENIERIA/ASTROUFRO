package alma.acs.tmcdb;
// Generated Dec 3, 2018 9:54:59 PM by Hibernate Tools 4.3.1.Final


import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * SnmpTrapSink generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name="`SNMPTRAPSINK`"
)
public class SnmpTrapSink extends alma.acs.tmcdb.translator.TmcdbObject implements java.io.Serializable {


     protected Integer configurationId;
     protected Configuration configuration;
     protected Computer computer;
     protected Integer trapPort;
     protected String trapSourcesNetworkMask;
     protected String snmpTrapCommunity;

    public SnmpTrapSink() {
    }
   
       @GenericGenerator(name="generator", strategy="foreign", parameters=@Parameter(name="property", value="configuration"))@Id @GeneratedValue(generator="generator")

    
    @Column(name="`CONFIGURATIONID`", unique=true, nullable=false)
    public Integer getConfigurationId() {
        return this.configurationId;
    }
    
    public void setConfigurationId(Integer configurationId) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("configurationId", this.configurationId, this.configurationId = configurationId);
        else
            this.configurationId = configurationId;
    }


@OneToOne(fetch=FetchType.LAZY)@PrimaryKeyJoinColumn
    public Configuration getConfiguration() {
        return this.configuration;
    }
    
    public void setConfiguration(Configuration configuration) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("configuration", this.configuration, this.configuration = configuration);
        else
            this.configuration = configuration;
    }


@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="`TRAPSINKCOMPUTERID`", nullable=false)
    public Computer getComputer() {
        return this.computer;
    }
    
    public void setComputer(Computer computer) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("computer", this.computer, this.computer = computer);
        else
            this.computer = computer;
    }


    
    @Column(name="`TRAPPORT`", nullable=false)
    public Integer getTrapPort() {
        return this.trapPort;
    }
    
    public void setTrapPort(Integer trapPort) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("trapPort", this.trapPort, this.trapPort = trapPort);
        else
            this.trapPort = trapPort;
    }


    
    @Column(name="`TRAPSOURCESNETWORKMASK`", nullable=false, length=256)
    public String getTrapSourcesNetworkMask() {
        return this.trapSourcesNetworkMask;
    }
    
    public void setTrapSourcesNetworkMask(String trapSourcesNetworkMask) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("trapSourcesNetworkMask", this.trapSourcesNetworkMask, this.trapSourcesNetworkMask = trapSourcesNetworkMask);
        else
            this.trapSourcesNetworkMask = trapSourcesNetworkMask;
    }


    
    @Column(name="`SNMPTRAPCOMMUNITY`", length=256)
    public String getSnmpTrapCommunity() {
        return this.snmpTrapCommunity;
    }
    
    public void setSnmpTrapCommunity(String snmpTrapCommunity) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("snmpTrapCommunity", this.snmpTrapCommunity, this.snmpTrapCommunity = snmpTrapCommunity);
        else
            this.snmpTrapCommunity = snmpTrapCommunity;
    }





}


