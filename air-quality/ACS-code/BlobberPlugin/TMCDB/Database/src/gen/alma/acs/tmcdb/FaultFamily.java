package alma.acs.tmcdb;
// Generated Dec 3, 2018 9:54:59 PM by Hibernate Tools 4.3.1.Final


import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * FaultFamily generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name="`FAULTFAMILY`"
    , uniqueConstraints =  @UniqueConstraint(columnNames={"`FAMILYNAME`", "`CONFIGURATIONID`"})
)
public class FaultFamily extends alma.acs.tmcdb.translator.TmcdbObject implements java.io.Serializable {


     protected Integer faultFamilyId;
     protected Configuration configuration;
     protected Contact contact;
     protected String familyName;
     protected String alarmSource;
     protected String helpURL;
     private Set<AlarmCategory> alarmCategories = new HashSet<AlarmCategory>(0);
     private Set<FaultCode> faultCodes = new HashSet<FaultCode>(0);
     private Set<DefaultMember> defaultMembers = new HashSet<DefaultMember>(0);
     private Set<FaultMember> faultMembers = new HashSet<FaultMember>(0);

    public FaultFamily() {
    }
   
    @Id @GeneratedValue(generator="generator")
    @GenericGenerator(name="generator", strategy="native",
       parameters = {@Parameter(name="sequence", value="FaultFamily_seq")}
	)

    
    @Column(name="`FAULTFAMILYID`", unique=true, nullable=false)
    public Integer getFaultFamilyId() {
        return this.faultFamilyId;
    }
    
    public void setFaultFamilyId(Integer faultFamilyId) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("faultFamilyId", this.faultFamilyId, this.faultFamilyId = faultFamilyId);
        else
            this.faultFamilyId = faultFamilyId;
    }


@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="`CONFIGURATIONID`", nullable=false)
    public Configuration getConfiguration() {
        return this.configuration;
    }
    
    public void setConfiguration(Configuration configuration) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("configuration", this.configuration, this.configuration = configuration);
        else
            this.configuration = configuration;
    }


@ManyToOne(cascade=CascadeType.PERSIST, fetch=FetchType.LAZY)@Cascade( {org.hibernate.annotations.CascadeType.SAVE_UPDATE, org.hibernate.annotations.CascadeType.LOCK} )
    @JoinColumn(name="`CONTACTID`", nullable=false)
    public Contact getContact() {
        return this.contact;
    }
    
    public void setContact(Contact contact) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("contact", this.contact, this.contact = contact);
        else
            this.contact = contact;
    }


    
    @Column(name="`FAMILYNAME`", nullable=false, length=256)
    public String getFamilyName() {
        return this.familyName;
    }
    
    public void setFamilyName(String familyName) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("familyName", this.familyName, this.familyName = familyName);
        else
            this.familyName = familyName;
    }


    
    @Column(name="`ALARMSOURCE`", length=256)
    public String getAlarmSource() {
        return this.alarmSource;
    }
    
    public void setAlarmSource(String alarmSource) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("alarmSource", this.alarmSource, this.alarmSource = alarmSource);
        else
            this.alarmSource = alarmSource;
    }


    
    @Column(name="`HELPURL`", length=256)
    public String getHelpURL() {
        return this.helpURL;
    }
    
    public void setHelpURL(String helpURL) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("helpURL", this.helpURL, this.helpURL = helpURL);
        else
            this.helpURL = helpURL;
    }


@ManyToMany(fetch=FetchType.LAZY, mappedBy="faultFamilies")
    public Set<AlarmCategory> getAlarmCategories() {
        return this.alarmCategories;
    }
    
    public void setAlarmCategories(Set<AlarmCategory> alarmCategories) {    
    	this.alarmCategories = alarmCategories;
    }

	public void addAlarmCategories(Set<AlarmCategory> elements) {
		if( this.alarmCategories != null )
			for(Iterator<AlarmCategory> it = elements.iterator(); it.hasNext(); )
				addAlarmCategoryToAlarmCategories((AlarmCategory)it.next());
	}

	public void addAlarmCategoryToAlarmCategories(AlarmCategory element) {
		if( !this.alarmCategories.contains(element) ) {
			this.alarmCategories.add(element);
		}
	}


@OneToMany(cascade=CascadeType.PERSIST, fetch=FetchType.LAZY, mappedBy="faultFamily")
    @Cascade( {org.hibernate.annotations.CascadeType.SAVE_UPDATE, org.hibernate.annotations.CascadeType.LOCK} )
    public Set<FaultCode> getFaultCodes() {
        return this.faultCodes;
    }
    
    public void setFaultCodes(Set<FaultCode> faultCodes) {    
    	this.faultCodes = faultCodes;
    }

	public void addFaultCodes(Set<FaultCode> elements) {
		if( this.faultCodes != null )
			for(Iterator<FaultCode> it = elements.iterator(); it.hasNext(); )
				addFaultCodeToFaultCodes((FaultCode)it.next());
	}

	public void addFaultCodeToFaultCodes(FaultCode element) {
		if( !this.faultCodes.contains(element) ) {
			this.faultCodes.add(element);
		}
	}


@OneToMany(cascade=CascadeType.PERSIST, fetch=FetchType.LAZY, mappedBy="faultFamily")
    @Cascade( {org.hibernate.annotations.CascadeType.SAVE_UPDATE, org.hibernate.annotations.CascadeType.LOCK} )
    public Set<DefaultMember> getDefaultMembers() {
        return this.defaultMembers;
    }
    
    public void setDefaultMembers(Set<DefaultMember> defaultMembers) {    
    	this.defaultMembers = defaultMembers;
    }

	public void addDefaultMembers(Set<DefaultMember> elements) {
		if( this.defaultMembers != null )
			for(Iterator<DefaultMember> it = elements.iterator(); it.hasNext(); )
				addDefaultMemberToDefaultMembers((DefaultMember)it.next());
	}

	public void addDefaultMemberToDefaultMembers(DefaultMember element) {
		if( !this.defaultMembers.contains(element) ) {
			this.defaultMembers.add(element);
		}
	}


@OneToMany(cascade=CascadeType.PERSIST, fetch=FetchType.LAZY, mappedBy="faultFamily")
    @Cascade( {org.hibernate.annotations.CascadeType.SAVE_UPDATE, org.hibernate.annotations.CascadeType.LOCK} )
    public Set<FaultMember> getFaultMembers() {
        return this.faultMembers;
    }
    
    public void setFaultMembers(Set<FaultMember> faultMembers) {    
    	this.faultMembers = faultMembers;
    }

	public void addFaultMembers(Set<FaultMember> elements) {
		if( this.faultMembers != null )
			for(Iterator<FaultMember> it = elements.iterator(); it.hasNext(); )
				addFaultMemberToFaultMembers((FaultMember)it.next());
	}

	public void addFaultMemberToFaultMembers(FaultMember element) {
		if( !this.faultMembers.contains(element) ) {
			this.faultMembers.add(element);
		}
	}



   public boolean equalsContent(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof FaultFamily) ) return false;
		 FaultFamily castOther = ( FaultFamily ) other;

		 return ( (this.getConfiguration()==castOther.getConfiguration()) || ( this.getConfiguration()!=null && castOther.getConfiguration()!=null && this.getConfiguration().equals(castOther.getConfiguration()) ) )
 && ( (this.getFamilyName()==castOther.getFamilyName()) || ( this.getFamilyName()!=null && castOther.getFamilyName()!=null && this.getFamilyName().equals(castOther.getFamilyName()) ) );
   }

   public int hashCodeContent() {
         int result = 17;

         
         result = 37 * result + ( getConfiguration() == null ? 0 : this.getConfiguration().hashCode() );
         
         result = 37 * result + ( getFamilyName() == null ? 0 : this.getFamilyName().hashCode() );
         
         
         
         
         
         
         return result;
   }


}


