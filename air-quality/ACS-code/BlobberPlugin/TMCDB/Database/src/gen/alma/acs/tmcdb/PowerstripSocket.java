package alma.acs.tmcdb;
// Generated Dec 3, 2018 9:54:59 PM by Hibernate Tools 4.3.1.Final


import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * PowerstripSocket generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name="`POWERSTRIPSOCKET`"
    , uniqueConstraints =  @UniqueConstraint(columnNames={"`NETWORKPOWERSTRIPID`", "`SOCKETNUMBER`"})
)
public class PowerstripSocket extends alma.acs.tmcdb.translator.TmcdbObject implements java.io.Serializable {


     protected Integer powerstripSocketId;
     protected NetworkDevice networkDevice;
     protected NetworkPowerstrip networkPowerstrip;
     protected Integer socketNumber;
     protected String socketName;

    public PowerstripSocket() {
    }
   
    @Id @GeneratedValue(generator="generator")
    @GenericGenerator(name="generator", strategy="native",
       parameters = {@Parameter(name="sequence", value="PowersS_seq")}
	)

    
    @Column(name="`POWERSTRIPSOCKETID`", unique=true, nullable=false)
    public Integer getPowerstripSocketId() {
        return this.powerstripSocketId;
    }
    
    public void setPowerstripSocketId(Integer powerstripSocketId) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("powerstripSocketId", this.powerstripSocketId, this.powerstripSocketId = powerstripSocketId);
        else
            this.powerstripSocketId = powerstripSocketId;
    }


@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="`POWEREDNETWORKDEVICEID`")
    public NetworkDevice getNetworkDevice() {
        return this.networkDevice;
    }
    
    public void setNetworkDevice(NetworkDevice networkDevice) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("networkDevice", this.networkDevice, this.networkDevice = networkDevice);
        else
            this.networkDevice = networkDevice;
    }


@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="`NETWORKPOWERSTRIPID`", nullable=false)
    public NetworkPowerstrip getNetworkPowerstrip() {
        return this.networkPowerstrip;
    }
    
    public void setNetworkPowerstrip(NetworkPowerstrip networkPowerstrip) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("networkPowerstrip", this.networkPowerstrip, this.networkPowerstrip = networkPowerstrip);
        else
            this.networkPowerstrip = networkPowerstrip;
    }


    
    @Column(name="`SOCKETNUMBER`", nullable=false)
    public Integer getSocketNumber() {
        return this.socketNumber;
    }
    
    public void setSocketNumber(Integer socketNumber) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("socketNumber", this.socketNumber, this.socketNumber = socketNumber);
        else
            this.socketNumber = socketNumber;
    }


    
    @Column(name="`SOCKETNAME`", length=256)
    public String getSocketName() {
        return this.socketName;
    }
    
    public void setSocketName(String socketName) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("socketName", this.socketName, this.socketName = socketName);
        else
            this.socketName = socketName;
    }



   public boolean equalsContent(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof PowerstripSocket) ) return false;
		 PowerstripSocket castOther = ( PowerstripSocket ) other;

		 return ( (this.getNetworkPowerstrip()==castOther.getNetworkPowerstrip()) || ( this.getNetworkPowerstrip()!=null && castOther.getNetworkPowerstrip()!=null && this.getNetworkPowerstrip().equals(castOther.getNetworkPowerstrip()) ) )
 && ( (this.getSocketNumber()==castOther.getSocketNumber()) || ( this.getSocketNumber()!=null && castOther.getSocketNumber()!=null && this.getSocketNumber().equals(castOther.getSocketNumber()) ) );
   }

   public int hashCodeContent() {
         int result = 17;

         
         
         result = 37 * result + ( getNetworkPowerstrip() == null ? 0 : this.getNetworkPowerstrip().hashCode() );
         result = 37 * result + ( getSocketNumber() == null ? 0 : this.getSocketNumber().hashCode() );
         
         return result;
   }


}


