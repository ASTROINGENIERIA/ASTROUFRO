package alma.acs.tmcdb;
// Generated Dec 3, 2018 9:54:59 PM by Hibernate Tools 4.3.1.Final


import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * LoggingConfig generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name="`LOGGINGCONFIG`"
)
public class LoggingConfig extends alma.acs.tmcdb.translator.TmcdbObject implements java.io.Serializable {


     protected Integer loggingConfigId;
     protected Byte minLogLevelDefault;
     protected Byte minLogLevelLocalDefault;
     protected String centralizedLogger;
     protected Byte dispatchPacketSize;
     protected Byte immediateDispatchLevel;
     protected Byte flushPeriodSeconds;
     protected Integer maxLogQueueSize;
     protected Integer maxLogsPerSecond;
     private Set<Manager> managers = new HashSet<Manager>(0);
     private Set<Container> containers = new HashSet<Container>(0);
     private Set<NamedLoggerConfig> namedLoggerConfigs = new HashSet<NamedLoggerConfig>(0);

    public LoggingConfig() {
    }
   
    @Id @GeneratedValue(generator="generator")
    @GenericGenerator(name="generator", strategy="native",
       parameters = {@Parameter(name="sequence", value="LogginC_seq")}
	)

    
    @Column(name="`LOGGINGCONFIGID`", unique=true, nullable=false)
    public Integer getLoggingConfigId() {
        return this.loggingConfigId;
    }
    
    public void setLoggingConfigId(Integer loggingConfigId) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("loggingConfigId", this.loggingConfigId, this.loggingConfigId = loggingConfigId);
        else
            this.loggingConfigId = loggingConfigId;
    }


    
    @Column(name="`MINLOGLEVELDEFAULT`")
    public Byte getMinLogLevelDefault() {
        return this.minLogLevelDefault;
    }
    
    public void setMinLogLevelDefault(Byte minLogLevelDefault) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("minLogLevelDefault", this.minLogLevelDefault, this.minLogLevelDefault = minLogLevelDefault);
        else
            this.minLogLevelDefault = minLogLevelDefault;
    }


    
    @Column(name="`MINLOGLEVELLOCALDEFAULT`")
    public Byte getMinLogLevelLocalDefault() {
        return this.minLogLevelLocalDefault;
    }
    
    public void setMinLogLevelLocalDefault(Byte minLogLevelLocalDefault) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("minLogLevelLocalDefault", this.minLogLevelLocalDefault, this.minLogLevelLocalDefault = minLogLevelLocalDefault);
        else
            this.minLogLevelLocalDefault = minLogLevelLocalDefault;
    }


    
    @Column(name="`CENTRALIZEDLOGGER`", length=16777216)
    public String getCentralizedLogger() {
        return this.centralizedLogger;
    }
    
    public void setCentralizedLogger(String centralizedLogger) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("centralizedLogger", this.centralizedLogger, this.centralizedLogger = centralizedLogger);
        else
            this.centralizedLogger = centralizedLogger;
    }


    
    @Column(name="`DISPATCHPACKETSIZE`")
    public Byte getDispatchPacketSize() {
        return this.dispatchPacketSize;
    }
    
    public void setDispatchPacketSize(Byte dispatchPacketSize) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("dispatchPacketSize", this.dispatchPacketSize, this.dispatchPacketSize = dispatchPacketSize);
        else
            this.dispatchPacketSize = dispatchPacketSize;
    }


    
    @Column(name="`IMMEDIATEDISPATCHLEVEL`")
    public Byte getImmediateDispatchLevel() {
        return this.immediateDispatchLevel;
    }
    
    public void setImmediateDispatchLevel(Byte immediateDispatchLevel) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("immediateDispatchLevel", this.immediateDispatchLevel, this.immediateDispatchLevel = immediateDispatchLevel);
        else
            this.immediateDispatchLevel = immediateDispatchLevel;
    }


    
    @Column(name="`FLUSHPERIODSECONDS`")
    public Byte getFlushPeriodSeconds() {
        return this.flushPeriodSeconds;
    }
    
    public void setFlushPeriodSeconds(Byte flushPeriodSeconds) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("flushPeriodSeconds", this.flushPeriodSeconds, this.flushPeriodSeconds = flushPeriodSeconds);
        else
            this.flushPeriodSeconds = flushPeriodSeconds;
    }


    
    @Column(name="`MAXLOGQUEUESIZE`")
    public Integer getMaxLogQueueSize() {
        return this.maxLogQueueSize;
    }
    
    public void setMaxLogQueueSize(Integer maxLogQueueSize) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("maxLogQueueSize", this.maxLogQueueSize, this.maxLogQueueSize = maxLogQueueSize);
        else
            this.maxLogQueueSize = maxLogQueueSize;
    }


    
    @Column(name="`MAXLOGSPERSECOND`")
    public Integer getMaxLogsPerSecond() {
        return this.maxLogsPerSecond;
    }
    
    public void setMaxLogsPerSecond(Integer maxLogsPerSecond) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("maxLogsPerSecond", this.maxLogsPerSecond, this.maxLogsPerSecond = maxLogsPerSecond);
        else
            this.maxLogsPerSecond = maxLogsPerSecond;
    }


@OneToMany(fetch=FetchType.LAZY, mappedBy="loggingConfig")
    public Set<Manager> getManagers() {
        return this.managers;
    }
    
    public void setManagers(Set<Manager> managers) {    
    	this.managers = managers;
    }

	public void addManagers(Set<Manager> elements) {
		if( this.managers != null )
			for(Iterator<Manager> it = elements.iterator(); it.hasNext(); )
				addManagerToManagers((Manager)it.next());
	}

	public void addManagerToManagers(Manager element) {
		if( !this.managers.contains(element) ) {
			this.managers.add(element);
		}
	}


@OneToMany(fetch=FetchType.LAZY, mappedBy="loggingConfig")
    public Set<Container> getContainers() {
        return this.containers;
    }
    
    public void setContainers(Set<Container> containers) {    
    	this.containers = containers;
    }

	public void addContainers(Set<Container> elements) {
		if( this.containers != null )
			for(Iterator<Container> it = elements.iterator(); it.hasNext(); )
				addContainerToContainers((Container)it.next());
	}

	public void addContainerToContainers(Container element) {
		if( !this.containers.contains(element) ) {
			this.containers.add(element);
		}
	}


@OneToMany(fetch=FetchType.LAZY, mappedBy="loggingConfig")
    @Cascade( {CascadeType.ALL, CascadeType.DELETE_ORPHAN} )
    public Set<NamedLoggerConfig> getNamedLoggerConfigs() {
        return this.namedLoggerConfigs;
    }
    
    public void setNamedLoggerConfigs(Set<NamedLoggerConfig> namedLoggerConfigs) {    
    	this.namedLoggerConfigs = namedLoggerConfigs;
    }

	public void addNamedLoggerConfigs(Set<NamedLoggerConfig> elements) {
		if( this.namedLoggerConfigs != null )
			for(Iterator<NamedLoggerConfig> it = elements.iterator(); it.hasNext(); )
				addNamedLoggerConfigToNamedLoggerConfigs((NamedLoggerConfig)it.next());
	}

	public void addNamedLoggerConfigToNamedLoggerConfigs(NamedLoggerConfig element) {
		if( !this.namedLoggerConfigs.contains(element) ) {
			this.namedLoggerConfigs.add(element);
		}
	}





}


