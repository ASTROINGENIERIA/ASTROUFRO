package alma.acs.tmcdb;
// Generated Dec 3, 2018 9:54:59 PM by Hibernate Tools 4.3.1.Final


import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * ComponentType generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name="`COMPONENTTYPE`"
    , uniqueConstraints =  @UniqueConstraint(columnNames="`IDL`")
)
public class ComponentType extends alma.acs.tmcdb.translator.TmcdbObject implements java.io.Serializable {


     protected Integer componentTypeId;
     protected String IDL;
     private Set<DefaultComponent> defaultComponents = new HashSet<DefaultComponent>(0);
     private Set<AssemblyType> assemblyTypes = new HashSet<AssemblyType>(0);
     private Set<Component> components = new HashSet<Component>(0);

    public ComponentType() {
    }
   
    @Id @GeneratedValue(generator="generator")
    @GenericGenerator(name="generator", strategy="native",
       parameters = {@Parameter(name="sequence", value="ComponT_seq")}
	)

    
    @Column(name="`COMPONENTTYPEID`", unique=true, nullable=false)
    public Integer getComponentTypeId() {
        return this.componentTypeId;
    }
    
    public void setComponentTypeId(Integer componentTypeId) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("componentTypeId", this.componentTypeId, this.componentTypeId = componentTypeId);
        else
            this.componentTypeId = componentTypeId;
    }


    
    @Column(name="`IDL`", unique=true, nullable=false, length=256)
    public String getIDL() {
        return this.IDL;
    }
    
    public void setIDL(String IDL) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("IDL", this.IDL, this.IDL = IDL);
        else
            this.IDL = IDL;
    }


@OneToMany(fetch=FetchType.LAZY, mappedBy="componentType")
    public Set<DefaultComponent> getDefaultComponents() {
        return this.defaultComponents;
    }
    
    public void setDefaultComponents(Set<DefaultComponent> defaultComponents) {    
    	this.defaultComponents = defaultComponents;
    }

	public void addDefaultComponents(Set<DefaultComponent> elements) {
		if( this.defaultComponents != null )
			for(Iterator<DefaultComponent> it = elements.iterator(); it.hasNext(); )
				addDefaultComponentToDefaultComponents((DefaultComponent)it.next());
	}

	public void addDefaultComponentToDefaultComponents(DefaultComponent element) {
		if( !this.defaultComponents.contains(element) ) {
			this.defaultComponents.add(element);
		}
	}


@OneToMany(fetch=FetchType.LAZY, mappedBy="componentType")
    public Set<AssemblyType> getAssemblyTypes() {
        return this.assemblyTypes;
    }
    
    public void setAssemblyTypes(Set<AssemblyType> assemblyTypes) {    
    	this.assemblyTypes = assemblyTypes;
    }

	public void addAssemblyTypes(Set<AssemblyType> elements) {
		if( this.assemblyTypes != null )
			for(Iterator<AssemblyType> it = elements.iterator(); it.hasNext(); )
				addAssemblyTypeToAssemblyTypes((AssemblyType)it.next());
	}

	public void addAssemblyTypeToAssemblyTypes(AssemblyType element) {
		if( !this.assemblyTypes.contains(element) ) {
			this.assemblyTypes.add(element);
		}
	}


@OneToMany(fetch=FetchType.LAZY, mappedBy="componentType")
    public Set<Component> getComponents() {
        return this.components;
    }
    
    public void setComponents(Set<Component> components) {    
    	this.components = components;
    }

	public void addComponents(Set<Component> elements) {
		if( this.components != null )
			for(Iterator<Component> it = elements.iterator(); it.hasNext(); )
				addComponentToComponents((Component)it.next());
	}

	public void addComponentToComponents(Component element) {
		if( !this.components.contains(element) ) {
			this.components.add(element);
		}
	}



   public boolean equalsContent(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof ComponentType) ) return false;
		 ComponentType castOther = ( ComponentType ) other;

		 return ( (this.getIDL()==castOther.getIDL()) || ( this.getIDL()!=null && castOther.getIDL()!=null && this.getIDL().equals(castOther.getIDL()) ) );
   }

   public int hashCodeContent() {
         int result = 17;

         
         result = 37 * result + ( getIDL() == null ? 0 : this.getIDL().hashCode() );
         
         
         
         return result;
   }


}


