# Python stubs generated by omniidl from /home/astro/scarrasco03/mqtt.devio.acs/acs/sensor_tag/src/../idl/sensortag.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "corbaidl.idl"
import corbaidl_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "boxes.idl"
import boxes_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "CosProperty.idl"
import CosProperty_idl
_0_CosPropertyService = omniORB.openModule("CosPropertyService")
_0_CosPropertyService__POA = omniORB.openModule("CosPropertyService__POA")

# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")

# #include "acscommon.idl"
import acscommon_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
_0_log_audience = omniORB.openModule("log_audience")
_0_log_audience__POA = omniORB.openModule("log_audience__POA")
_0_acscommon = omniORB.openModule("acscommon")
_0_acscommon__POA = omniORB.openModule("acscommon__POA")

# #include "baciErrTypeProperty.idl"
import baciErrTypeProperty_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_baciErrTypeProperty = omniORB.openModule("baciErrTypeProperty")
_0_baciErrTypeProperty__POA = omniORB.openModule("baciErrTypeProperty__POA")

# #include "baci.idl"
import baci_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

#
# Start of module "Sensors"
#
__name__ = "Sensors"
_0_Sensors = omniORB.openModule("Sensors", r"/home/astro/scarrasco03/mqtt.devio.acs/acs/sensor_tag/src/../idl/sensortag.idl")
_0_Sensors__POA = omniORB.openModule("Sensors__POA", r"/home/astro/scarrasco03/mqtt.devio.acs/acs/sensor_tag/src/../idl/sensortag.idl")


# interface sensortag
_0_Sensors._d_sensortag = (omniORB.tcInternal.tv_objref, "IDL:example/Sensors/sensortag:1.0", "sensortag")
omniORB.typeMapping["IDL:example/Sensors/sensortag:1.0"] = _0_Sensors._d_sensortag
_0_Sensors.sensortag = omniORB.newEmptyClass()
class sensortag (_0_ACS.CharacteristicComponent):
    _NP_RepositoryId = _0_Sensors._d_sensortag[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Sensors.sensortag = sensortag
_0_Sensors._tc_sensortag = omniORB.tcInternal.createTypeCode(_0_Sensors._d_sensortag)
omniORB.registerType(sensortag._NP_RepositoryId, _0_Sensors._d_sensortag, _0_Sensors._tc_sensortag)

# sensortag operations and attributes
sensortag._d__get_temperature = ((),(omniORB.typeMapping["IDL:alma/ACS/ROdouble:1.0"],),None)
sensortag._d__get_light = ((),(omniORB.typeMapping["IDL:alma/ACS/ROdouble:1.0"],),None)
sensortag._d__get_pressure = ((),(omniORB.typeMapping["IDL:alma/ACS/ROdouble:1.0"],),None)
sensortag._d__get_humidity = ((),(omniORB.typeMapping["IDL:alma/ACS/ROdouble:1.0"],),None)
sensortag._d__get_dioxide = ((),(omniORB.typeMapping["IDL:alma/ACS/ROdouble:1.0"],),None)
sensortag._d__get_oxygen = ((),(omniORB.typeMapping["IDL:alma/ACS/ROdouble:1.0"],),None)
sensortag._d__get_time = ((),(omniORB.typeMapping["IDL:alma/ACS/ROlongLong:1.0"],),None)
sensortag._d_on = ((), (), None)
sensortag._d_off = ((), (), None)
sensortag._d_publishTemperature = ((), (), None)
sensortag._d_publishLight = ((), (), None)
sensortag._d_publishPressure = ((), (), None)
sensortag._d_publishHumidity = ((), (), None)
sensortag._d_publishDioxide = ((), (), None)
sensortag._d_publishOxygen = ((), (), None)
sensortag._d_publishTime = ((), (), None)

# sensortag object reference
class _objref_sensortag (_0_ACS._objref_CharacteristicComponent):
    _NP_RepositoryId = sensortag._NP_RepositoryId

    def __init__(self, obj):
        _0_ACS._objref_CharacteristicComponent.__init__(self, obj)

    def _get_temperature(self, *args):
        return self._obj.invoke("_get_temperature", _0_Sensors.sensortag._d__get_temperature, args)

    temperature = property(_get_temperature)


    def _get_light(self, *args):
        return self._obj.invoke("_get_light", _0_Sensors.sensortag._d__get_light, args)

    light = property(_get_light)


    def _get_pressure(self, *args):
        return self._obj.invoke("_get_pressure", _0_Sensors.sensortag._d__get_pressure, args)

    pressure = property(_get_pressure)


    def _get_humidity(self, *args):
        return self._obj.invoke("_get_humidity", _0_Sensors.sensortag._d__get_humidity, args)

    humidity = property(_get_humidity)


    def _get_dioxide(self, *args):
        return self._obj.invoke("_get_dioxide", _0_Sensors.sensortag._d__get_dioxide, args)

    dioxide = property(_get_dioxide)


    def _get_oxygen(self, *args):
        return self._obj.invoke("_get_oxygen", _0_Sensors.sensortag._d__get_oxygen, args)

    oxygen = property(_get_oxygen)


    def _get_time(self, *args):
        return self._obj.invoke("_get_time", _0_Sensors.sensortag._d__get_time, args)

    time = property(_get_time)


    def on(self, *args):
        return self._obj.invoke("on", _0_Sensors.sensortag._d_on, args)

    def off(self, *args):
        return self._obj.invoke("off", _0_Sensors.sensortag._d_off, args)

    def publishTemperature(self, *args):
        return self._obj.invoke("publishTemperature", _0_Sensors.sensortag._d_publishTemperature, args)

    def publishLight(self, *args):
        return self._obj.invoke("publishLight", _0_Sensors.sensortag._d_publishLight, args)

    def publishPressure(self, *args):
        return self._obj.invoke("publishPressure", _0_Sensors.sensortag._d_publishPressure, args)

    def publishHumidity(self, *args):
        return self._obj.invoke("publishHumidity", _0_Sensors.sensortag._d_publishHumidity, args)

    def publishDioxide(self, *args):
        return self._obj.invoke("publishDioxide", _0_Sensors.sensortag._d_publishDioxide, args)

    def publishOxygen(self, *args):
        return self._obj.invoke("publishOxygen", _0_Sensors.sensortag._d_publishOxygen, args)

    def publishTime(self, *args):
        return self._obj.invoke("publishTime", _0_Sensors.sensortag._d_publishTime, args)

omniORB.registerObjref(sensortag._NP_RepositoryId, _objref_sensortag)
_0_Sensors._objref_sensortag = _objref_sensortag
del sensortag, _objref_sensortag

# sensortag skeleton
__name__ = "Sensors__POA"
class sensortag (_0_ACS__POA.CharacteristicComponent):
    _NP_RepositoryId = _0_Sensors.sensortag._NP_RepositoryId


    _omni_op_d = {"_get_temperature": _0_Sensors.sensortag._d__get_temperature, "_get_light": _0_Sensors.sensortag._d__get_light, "_get_pressure": _0_Sensors.sensortag._d__get_pressure, "_get_humidity": _0_Sensors.sensortag._d__get_humidity, "_get_dioxide": _0_Sensors.sensortag._d__get_dioxide, "_get_oxygen": _0_Sensors.sensortag._d__get_oxygen, "_get_time": _0_Sensors.sensortag._d__get_time, "on": _0_Sensors.sensortag._d_on, "off": _0_Sensors.sensortag._d_off, "publishTemperature": _0_Sensors.sensortag._d_publishTemperature, "publishLight": _0_Sensors.sensortag._d_publishLight, "publishPressure": _0_Sensors.sensortag._d_publishPressure, "publishHumidity": _0_Sensors.sensortag._d_publishHumidity, "publishDioxide": _0_Sensors.sensortag._d_publishDioxide, "publishOxygen": _0_Sensors.sensortag._d_publishOxygen, "publishTime": _0_Sensors.sensortag._d_publishTime}
    _omni_op_d.update(_0_ACS__POA.CharacteristicComponent._omni_op_d)

sensortag._omni_skeleton = sensortag
_0_Sensors__POA.sensortag = sensortag
omniORB.registerSkeleton(sensortag._NP_RepositoryId, sensortag)
del sensortag
__name__ = "Sensors"

#
# End of module "Sensors"
#
__name__ = "sensortag_idl"

_exported_modules = ( "Sensors", )

# The end.
