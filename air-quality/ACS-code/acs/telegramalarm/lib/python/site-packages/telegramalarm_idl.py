# Python stubs generated by omniidl from /home/astro/scarrasco03/mqtt.devio.acs/acs/telegramalarm/src/../idl/telegramalarm.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "corbaidl.idl"
import corbaidl_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "boxes.idl"
import boxes_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "CosProperty.idl"
import CosProperty_idl
_0_CosPropertyService = omniORB.openModule("CosPropertyService")
_0_CosPropertyService__POA = omniORB.openModule("CosPropertyService__POA")

# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")

# #include "acscommon.idl"
import acscommon_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
_0_log_audience = omniORB.openModule("log_audience")
_0_log_audience__POA = omniORB.openModule("log_audience__POA")
_0_acscommon = omniORB.openModule("acscommon")
_0_acscommon__POA = omniORB.openModule("acscommon__POA")

# #include "baciErrTypeProperty.idl"
import baciErrTypeProperty_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_baciErrTypeProperty = omniORB.openModule("baciErrTypeProperty")
_0_baciErrTypeProperty__POA = omniORB.openModule("baciErrTypeProperty__POA")

# #include "baci.idl"
import baci_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

#
# Start of module "Telegram"
#
__name__ = "Telegram"
_0_Telegram = omniORB.openModule("Telegram", r"/home/astro/scarrasco03/mqtt.devio.acs/acs/telegramalarm/src/../idl/telegramalarm.idl")
_0_Telegram__POA = omniORB.openModule("Telegram__POA", r"/home/astro/scarrasco03/mqtt.devio.acs/acs/telegramalarm/src/../idl/telegramalarm.idl")


# interface telegramalarm
_0_Telegram._d_telegramalarm = (omniORB.tcInternal.tv_objref, "IDL:example/Telegram/telegramalarm:1.0", "telegramalarm")
omniORB.typeMapping["IDL:example/Telegram/telegramalarm:1.0"] = _0_Telegram._d_telegramalarm
_0_Telegram.telegramalarm = omniORB.newEmptyClass()
class telegramalarm (_0_ACS.ACSComponent):
    _NP_RepositoryId = _0_Telegram._d_telegramalarm[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Telegram.telegramalarm = telegramalarm
_0_Telegram._tc_telegramalarm = omniORB.tcInternal.createTypeCode(_0_Telegram._d_telegramalarm)
omniORB.registerType(telegramalarm._NP_RepositoryId, _0_Telegram._d_telegramalarm, _0_Telegram._tc_telegramalarm)

# telegramalarm operations and attributes
telegramalarm._d_addValue = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_double), (), None)
telegramalarm._d_send_status = (((omniORB.tcInternal.tv_string,0), ), (), None)
telegramalarm._d_send_values = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), None)
telegramalarm._d_send_subscribe = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), None)
telegramalarm._d_send_unsubscribe = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), None)
telegramalarm._d_send_unsubscribeall = (((omniORB.tcInternal.tv_string,0), ), (), None)
telegramalarm._d_send_subscribeall = (((omniORB.tcInternal.tv_string,0), ), (), None)
telegramalarm._d_send_echo_all = (((omniORB.tcInternal.tv_string,0), ), (), None)
telegramalarm._d_clearAll = ((), (), None)
telegramalarm._d_getOptions = ((), ((omniORB.tcInternal.tv_string,0), ), None)

# telegramalarm object reference
class _objref_telegramalarm (_0_ACS._objref_ACSComponent):
    _NP_RepositoryId = telegramalarm._NP_RepositoryId

    def __init__(self, obj):
        _0_ACS._objref_ACSComponent.__init__(self, obj)

    def addValue(self, *args):
        return self._obj.invoke("addValue", _0_Telegram.telegramalarm._d_addValue, args)

    def send_status(self, *args):
        return self._obj.invoke("send_status", _0_Telegram.telegramalarm._d_send_status, args)

    def send_values(self, *args):
        return self._obj.invoke("send_values", _0_Telegram.telegramalarm._d_send_values, args)

    def send_subscribe(self, *args):
        return self._obj.invoke("send_subscribe", _0_Telegram.telegramalarm._d_send_subscribe, args)

    def send_unsubscribe(self, *args):
        return self._obj.invoke("send_unsubscribe", _0_Telegram.telegramalarm._d_send_unsubscribe, args)

    def send_unsubscribeall(self, *args):
        return self._obj.invoke("send_unsubscribeall", _0_Telegram.telegramalarm._d_send_unsubscribeall, args)

    def send_subscribeall(self, *args):
        return self._obj.invoke("send_subscribeall", _0_Telegram.telegramalarm._d_send_subscribeall, args)

    def send_echo_all(self, *args):
        return self._obj.invoke("send_echo_all", _0_Telegram.telegramalarm._d_send_echo_all, args)

    def clearAll(self, *args):
        return self._obj.invoke("clearAll", _0_Telegram.telegramalarm._d_clearAll, args)

    def getOptions(self, *args):
        return self._obj.invoke("getOptions", _0_Telegram.telegramalarm._d_getOptions, args)

omniORB.registerObjref(telegramalarm._NP_RepositoryId, _objref_telegramalarm)
_0_Telegram._objref_telegramalarm = _objref_telegramalarm
del telegramalarm, _objref_telegramalarm

# telegramalarm skeleton
__name__ = "Telegram__POA"
class telegramalarm (_0_ACS__POA.ACSComponent):
    _NP_RepositoryId = _0_Telegram.telegramalarm._NP_RepositoryId


    _omni_op_d = {"addValue": _0_Telegram.telegramalarm._d_addValue, "send_status": _0_Telegram.telegramalarm._d_send_status, "send_values": _0_Telegram.telegramalarm._d_send_values, "send_subscribe": _0_Telegram.telegramalarm._d_send_subscribe, "send_unsubscribe": _0_Telegram.telegramalarm._d_send_unsubscribe, "send_unsubscribeall": _0_Telegram.telegramalarm._d_send_unsubscribeall, "send_subscribeall": _0_Telegram.telegramalarm._d_send_subscribeall, "send_echo_all": _0_Telegram.telegramalarm._d_send_echo_all, "clearAll": _0_Telegram.telegramalarm._d_clearAll, "getOptions": _0_Telegram.telegramalarm._d_getOptions}
    _omni_op_d.update(_0_ACS__POA.ACSComponent._omni_op_d)

telegramalarm._omni_skeleton = telegramalarm
_0_Telegram__POA.telegramalarm = telegramalarm
omniORB.registerSkeleton(telegramalarm._NP_RepositoryId, telegramalarm)
del telegramalarm
__name__ = "Telegram"

#
# End of module "Telegram"
#
__name__ = "telegramalarm_idl"

_exported_modules = ( "Telegram", )

# The end.
