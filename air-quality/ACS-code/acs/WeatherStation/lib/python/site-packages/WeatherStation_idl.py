# Python stubs generated by omniidl from /home/astro/scarrasco03/mqtt.devio.acs/acs/WeatherStation/src/../idl/WeatherStation.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "corbaidl.idl"
import corbaidl_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "boxes.idl"
import boxes_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "CosProperty.idl"
import CosProperty_idl
_0_CosPropertyService = omniORB.openModule("CosPropertyService")
_0_CosPropertyService__POA = omniORB.openModule("CosPropertyService__POA")

# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")

# #include "acscommon.idl"
import acscommon_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
_0_log_audience = omniORB.openModule("log_audience")
_0_log_audience__POA = omniORB.openModule("log_audience__POA")
_0_acscommon = omniORB.openModule("acscommon")
_0_acscommon__POA = omniORB.openModule("acscommon__POA")

# #include "baciErrTypeProperty.idl"
import baciErrTypeProperty_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_baciErrTypeProperty = omniORB.openModule("baciErrTypeProperty")
_0_baciErrTypeProperty__POA = omniORB.openModule("baciErrTypeProperty__POA")

# #include "baci.idl"
import baci_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

#
# Start of module "Weather"
#
__name__ = "Weather"
_0_Weather = omniORB.openModule("Weather", r"/home/astro/scarrasco03/mqtt.devio.acs/acs/WeatherStation/src/../idl/WeatherStation.idl")
_0_Weather__POA = omniORB.openModule("Weather__POA", r"/home/astro/scarrasco03/mqtt.devio.acs/acs/WeatherStation/src/../idl/WeatherStation.idl")


# interface WeatherStation
_0_Weather._d_WeatherStation = (omniORB.tcInternal.tv_objref, "IDL:example/Weather/WeatherStation:1.0", "WeatherStation")
omniORB.typeMapping["IDL:example/Weather/WeatherStation:1.0"] = _0_Weather._d_WeatherStation
_0_Weather.WeatherStation = omniORB.newEmptyClass()
class WeatherStation (_0_ACS.ACSComponent):
    _NP_RepositoryId = _0_Weather._d_WeatherStation[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Weather.WeatherStation = WeatherStation
_0_Weather._tc_WeatherStation = omniORB.tcInternal.createTypeCode(_0_Weather._d_WeatherStation)
omniORB.registerType(WeatherStation._NP_RepositoryId, _0_Weather._d_WeatherStation, _0_Weather._tc_WeatherStation)

# WeatherStation operations and attributes
WeatherStation._d_getTemperature = ((), (omniORB.tcInternal.tv_double, ), None)
WeatherStation._d_getHumidity = ((), (omniORB.tcInternal.tv_double, ), None)
WeatherStation._d_getLight = ((), (omniORB.tcInternal.tv_double, ), None)
WeatherStation._d_writeTemperature = ((), (), None)
WeatherStation._d_writeHumidity = ((), (), None)
WeatherStation._d_writeLight = ((), (), None)

# WeatherStation object reference
class _objref_WeatherStation (_0_ACS._objref_ACSComponent):
    _NP_RepositoryId = WeatherStation._NP_RepositoryId

    def __init__(self, obj):
        _0_ACS._objref_ACSComponent.__init__(self, obj)

    def getTemperature(self, *args):
        return self._obj.invoke("getTemperature", _0_Weather.WeatherStation._d_getTemperature, args)

    def getHumidity(self, *args):
        return self._obj.invoke("getHumidity", _0_Weather.WeatherStation._d_getHumidity, args)

    def getLight(self, *args):
        return self._obj.invoke("getLight", _0_Weather.WeatherStation._d_getLight, args)

    def writeTemperature(self, *args):
        return self._obj.invoke("writeTemperature", _0_Weather.WeatherStation._d_writeTemperature, args)

    def writeHumidity(self, *args):
        return self._obj.invoke("writeHumidity", _0_Weather.WeatherStation._d_writeHumidity, args)

    def writeLight(self, *args):
        return self._obj.invoke("writeLight", _0_Weather.WeatherStation._d_writeLight, args)

omniORB.registerObjref(WeatherStation._NP_RepositoryId, _objref_WeatherStation)
_0_Weather._objref_WeatherStation = _objref_WeatherStation
del WeatherStation, _objref_WeatherStation

# WeatherStation skeleton
__name__ = "Weather__POA"
class WeatherStation (_0_ACS__POA.ACSComponent):
    _NP_RepositoryId = _0_Weather.WeatherStation._NP_RepositoryId


    _omni_op_d = {"getTemperature": _0_Weather.WeatherStation._d_getTemperature, "getHumidity": _0_Weather.WeatherStation._d_getHumidity, "getLight": _0_Weather.WeatherStation._d_getLight, "writeTemperature": _0_Weather.WeatherStation._d_writeTemperature, "writeHumidity": _0_Weather.WeatherStation._d_writeHumidity, "writeLight": _0_Weather.WeatherStation._d_writeLight}
    _omni_op_d.update(_0_ACS__POA.ACSComponent._omni_op_d)

WeatherStation._omni_skeleton = WeatherStation
_0_Weather__POA.WeatherStation = WeatherStation
omniORB.registerSkeleton(WeatherStation._NP_RepositoryId, WeatherStation)
del WeatherStation
__name__ = "Weather"

#
# End of module "Weather"
#
__name__ = "WeatherStation_idl"

_exported_modules = ( "Weather", )

# The end.
